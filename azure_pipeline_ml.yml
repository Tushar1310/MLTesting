resources:
  - repo: self

trigger:
  - main

variables:
  databricks-host: 'https://adb-4188668828067310.10.azuredatabricks.net'
  notebook-folder: '/Users/tushar.pathak@tigeranalytics.com/'
  cluster-id: '0708-064558-lglz5exu'
  notebook-name: 'Deepchecks_Model_Testing_v2'


steps:
- task: UsePythonVersion@0
  inputs:
    versionSpec: '3.7'
    addToPath: true
    architecture: 'x64'
  displayName: 'Use Python 3.x'

- script: |
    pip install databricks-cli jq
  displayName: 'Install databricks-cli and jq'

- script: |
    databricks jobs configure --version=2.1
    JOB_ID=$(databricks jobs create --json '{
     "name": "Testrun",
     "existing_cluster_id": "$(cluster-id)",
     "timeout_seconds": 3600,
     "max_retries": 1,
     "notebook_task": {
       "notebook_path": "$(notebook-folder)$(notebook-name)",
       "base_parameters": {}
     }
    }' | jq -r '.job_id')

    echo "Job ID: $JOB_ID"

    RUN_ID=$(databricks jobs run-now --job-id $JOB_ID | jq -r '.run_id')

    echo "Run ID: $RUN_ID"

    job_status="PENDING"
    while [ "$job_status" = "RUNNING" ] || [ "$job_status" = "PENDING" ]
    do
     sleep 2
     job_status=$(databricks runs get --run-id $RUN_ID | jq -r '.state.life_cycle_state')
     echo "Status: $job_status"
    done

    RESULT=$(databricks runs get-output --run-id $RUN_ID)

    RESULT_STATE=$(echo $RESULT | jq -r '.metadata.state.result_state')
    RESULT_MESSAGE=$(echo $RESULT | jq -r '.metadata.state.state_message')
    if [ "$RESULT_STATE" = "FAILED" ]
    then
     echo "##vso[task.logissue type=error;]$RESULT_MESSAGE"
     echo "##vso[task.complete result=Failed;done=true;]$RESULT_MESSAGE"
    else
     echo "##vso[task.complete result=Succeeded;done=true;]Job completed successfully"
    fi

    echo $RESULT | jq .
  displayName: 'Run Databricks Notebook'

  env:
    DATABRICKS_TOKEN: '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'
    DATABRICKS_HOST: $(databricks-host)
